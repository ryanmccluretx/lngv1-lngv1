module.exports = {
  root: true,
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint'],
  parserOptions: {
    project: true,
    projectService: true,
    tsconfigRootDir: __dirname,
  },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended', // Enables eslint-plugin-prettier and displays prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
  ],
  rules: {
    '@typescript-eslint/camelcase': 0,
    '@typescript-eslint/explicit-function-return-type': 0,
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-use-before-define': ['error', { functions: false, variables: false }],
    '@typescript-eslint/no-unused-vars': ['error', { ignoreRestSiblings: true }],
    '@typescript-eslint/no-floating-promises': 'error',
    'prettier/prettier': [
      'error',
      {
        endOfLine: 'auto',
      },
    ],
  },
  globals: {
    clearTimeout: 'readonly',
    setTimeout: 'readonly',
    setInterval: 'readonly',
    clearInterval: 'readonly',
    tryParse: 'readonly',
    LoggerInterface: 'readonly',
    Asset: 'readonly',
    AssetTree: 'readonly',
    Group: 'readonly',
    newUUID: 'readonly',
    CollectionName: 'readonly',
    AssetStatusUpdateMethod: 'readonly',
    MQTT: 'readonly',
    cbmeta: 'readonly',
    console: 'readonly',
    ClearBlade: 'readonly',
    ClearBladeAsync: 'readonly',
    log: 'readonly',
    Logger: 'readonly',
    LogLevels: 'readonly',
    getErrorMessage: 'readonly',
    getErrorStack: 'readonly',
    Topics: 'readonly',
    GC: 'readonly',
    LazyCache: 'readonly',
    publisher: 'readonly',
    bulkPublisher: 'readonly',
    global: 'writeable',
    assetToBackend: 'readonly',
    deprecated_assetLocationAndStatus_handleMessage: 'readonly',
    LockName: 'readonly',
    geo: 'readonly',
    Mutex: 'readonly',
    cbsquel: 'readonly',
    assetLocationAndStatusOverrides: 'readonly',
    requireLibrary: 'readonly',
    fetch: 'readonly',
    crypto: 'readonly',
  },
};
